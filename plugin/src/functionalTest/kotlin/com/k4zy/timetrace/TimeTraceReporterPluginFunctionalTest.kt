/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.k4zy.timetrace

import java.io.File
import org.gradle.testkit.runner.GradleRunner
import kotlin.test.Test
import kotlin.test.assertTrue

/**
 * A simple functional test for the 'TimeTraceReporter.greeting' plugin.
 */
class TimeTraceReporterPluginFunctionalTest {
    @Test
    fun `can run task`() {
        // Setup the test build
        val projectDir = File("build/functionalTest")
        projectDir.mkdirs()
        projectDir.resolve("settings.gradle").writeText("")
        projectDir.resolve("build.gradle").writeText(
            """
            plugins {
                id('com.k4zy.time-trace')
            }
            task greeting {
                doLast {
                    println 'Hello world!'
                }
            }
        """
        )

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("greeting")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the result
        assertTrue(result.output.contains("Console Output"))
    }

    @Test
    fun `enable csv report`() {
        // Setup the test build
        val projectDir = File("build/functionalTest")
        projectDir.mkdirs()
        projectDir.resolve("settings.gradle").writeText("")
        projectDir.resolve("build.gradle").writeText(
            """
            plugins {
                id('com.k4zy.time-trace')
            }
            timeTraceReporter {
                csvHeader = true
                csvFileName = "functionalTest.csv"
            }
            task greeting {
                doLast {
                    println 'Hello world!'
                }
            }
        """
        )

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("greeting")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the result
//        assertTrue(result.output.contains("Csv Output"))
    }
}
